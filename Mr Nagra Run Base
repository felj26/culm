import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions
width = 1000
height = 750
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Mr. Nagra Run")

# Colors
blue = (0, 0, 225)
red = (255, 0, 0)
purple = (99, 30, 98)
white = (255, 255, 255)
black = (0, 0, 0)
beige = (207, 173, 81)
green = (0, 255, 0)

# Fonts
font = pygame.font.SysFont("Comic Sans", 37)

# Clock
clock = pygame.time.Clock()

# Variables
speed = 6
gravity = 1
player_jump_strength = -10
max_jump_hold_time = 120  # 2 seconds at 60 FPS

class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(red)
        self.original_image = self.image.copy()
        self.rect = self.image.get_rect(midbottom=(200, height - 100))
        self.velocity = 0
        self.is_jumping = False
        self.is_ducking = False
        self.jump_key_held = False
        self.jump_hold_timer = 0

    def update(self):
        # Gravity
        if self.jump_key_held and self.jump_hold_timer < max_jump_hold_time:
            self.velocity += gravity / 4  # Reduce gravity effect during controlled jump
            self.jump_hold_timer += 1
        else:
            self.velocity += gravity

        self.rect.y += self.velocity

        # Ground collision
        if self.rect.bottom >= height - 100:
            self.rect.bottom = height - 100
            self.is_jumping = False
            self.jump_key_held = False
            self.jump_hold_timer = 0

        # Ducking
        if self.is_ducking:
            self.image = pygame.transform.scale(self.original_image, (50, 25))
            self.rect.height = 25
        else:
            self.image = self.original_image
            self.rect.height = 50

    def jump(self):
        if not self.is_jumping:
            self.velocity = player_jump_strength
            self.is_jumping = True
            self.jump_key_held = True
            self.jump_hold_timer = 0

    def duck(self):
        if not self.is_jumping:
            self.is_ducking = True

    def stand(self):
        self.is_ducking = False

class Obstacle(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(black)
        self.rect = self.image.get_rect(midbottom=(x, y))

    def update(self):
        self.rect.x -= speed
        if self.rect.right < 0:
            self.kill()

def create_obstacle():
    # Spawn the obstacle at a random height to simulate flying in
    obstacle_y = random.randint(height - 200, height - 100)
    obstacle = Obstacle(width + random.randint(100, 300), obstacle_y)
    obstacles.add(obstacle)
    all_sprites.add(obstacle)

def draw_ground():
    pygame.draw.rect(screen, green, (0, height - 100, width, 100))

def display_score(score):
    score_text = font.render(f"Score: {score}", True, black)
    screen.blit(score_text, (10, 10))

def show_game_over(score):
    screen.fill(beige)
    game_over_text = font.render("Game Over!", True, black)
    score_text = font.render(f"Your Score: {score}", True, black)
    restart_text = font.render("Press 'R' to Restart", True, red)

    screen.blit(game_over_text, ((width - game_over_text.get_width()) // 2, height // 2 - 100))
    screen.blit(score_text, ((width - score_text.get_width()) // 2, height // 2))
    screen.blit(restart_text, ((width - restart_text.get_width()) // 2, height // 2 + 100))
    pygame.display.flip()

    # Wait for the player to press 'R' to restart
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    waiting = False

def main():
    global speed
    # Reset variables
    score = 0
    spawn_timer = 0
    speed = 6

    # Reset sprite groups
    global all_sprites, obstacles
    all_sprites = pygame.sprite.Group()
    obstacles = pygame.sprite.Group()

    player = Player()
    all_sprites.add(player)

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE or event.key == pygame.K_UP:
                    player.jump()
                if event.key == pygame.K_DOWN:
                    player.duck()
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_DOWN:
                    player.stand()
                if event.key == pygame.K_SPACE or event.key == pygame.K_UP:
                    player.jump_key_held = False

        # Game logic
        all_sprites.update()

        # Spawn obstacles
        spawn_timer += 1
        if spawn_timer > 60:  # Spawn every 1 second
            create_obstacle()
            spawn_timer = 0

        # Check collisions
        if pygame.sprite.spritecollide(player, obstacles, False):
            running = False

        # Update score
        score += 1

        # Drawing
        screen.fill(beige)
        draw_ground()
        all_sprites.draw(screen)
        display_score(score)

        # Refresh
        pygame.display.flip()
        clock.tick(60)

    # Show game over screen
    show_game_over(score)

# Start the game
while True:
    main()
